hc_title(text= paste0("<b>", colnames(df)[4], "Price Candle Stick Chart</b>"))
View(strategy1)
#ver prediction1.R
return_df <- dailyReturn(Cl(df))
charts.PerformanceSummary(return_df, main = "Estrategia 1")
View(return_df)
strategy1.ret <- return_df * strategy1
View(strategy1)
charts.PerformanceSummary(strategy1.ret, main = "Estrategia 1")
charts.PerformanceSummary(strategy1, main = "Estrategia 1")
charts.PerformanceSummary(strategy1.ret, main = "Estrategia 1")
return_df <- dailyReturn(Cl(df))
strategy1.ret <- return_df * strategy1
strategy2.ret <- return_df * strategy2
retall <- cbind(strategy1.ret, strategy2.ret)
charts.PerformanceSummary(retall, main = "Estrategia 1")
# Charting return strategies
return_df <- dailyReturn(Cl(df))
strategy1.ret <- return_df * strategy1
names(strategy1.ret) <- 'Estrategy 1'
strategy2.ret <- return_df * strategy2
names(strategy2.ret) <- 'Estrategy 2'
retall <- cbind(strategy1.ret, strategy2.ret)
charts.PerformanceSummary(retall, main = "Compararing Strategies")
# Charting return strategies
return_df <- dailyReturn(Cl(df))
strategy1.ret <- return_df * strategy1
names(strategy1.ret) <- 'Estrategy 1'
strategy2.ret <- return_df * strategy2
names(strategy2.ret) <- 'Estrategy 2'
strategy3.ret <- return_df * strategy3
names(strategy3.ret) <- 'Estrategy 3'
retall <- cbind(strategy1.ret, strategy2.ret, strategy3.ret)
charts.PerformanceSummary(retall, main = "Compararing Strategies")
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
chartSeries(df, subset = "2022-01::2023-05-19")
chartSeries(df, subset = "2022-01::2023-05-19")
addTA(strategy1, type='S',col='red')
chartSeries(df, subset = "2022-01::2023-05-19")
addTA(strategy1, type='S',col='red')
addTA(strategy2, type='S',col='#FFE569')
chartSeries(df, subset = "2022-01::2023-05-19")
addTA(strategy1, type='S',col='red')
addTA(strategy2, type='S',col='#FFE569')
addTA(strategy3, type='S',col='#FDCEDF')
View(macd)
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
View(AAPL)
getSymbols("AAPL",from=from,src="yahoo", interval = "1m")
View(AAPL)
getSymbols("AAPL",from=from,src="yahoo", interval = "mins")
View(AAPL)
library(tidyverse)
library(dplyr)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library("IRdisplay")
library(highcharter) #Interactive Plot
# ___Inputs___
from <- "2022-01-01"
to <- "2023-05-19"
getSymbols(c("AMZN","DAL"))
getSymbols("AAPL",from=from,src="yahoo", interval = "mins")
library(tidyverse)
library(dplyr)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library("IRdisplay")
library(highcharter) #Interactive Plot
# ___Inputs___
from <- "2022-05-25"
to <- "2023-05-26"
getSymbols(c("AMZN","DAL"))
getSymbols("AAPL",from=from, to=to, src="yahoo", interval = "mins")
library(tidyverse)
library(dplyr)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library("IRdisplay")
library(highcharter) #Interactive Plot
# ___Inputs___
from <- "2023-05-25"
to <- "2023-05-26"
getSymbols(c("AMZN","DAL"))
getSymbols("AAPL",from=from, to=to, src="yahoo", interval = "mins")
getSymbols("AAPL",from=from, to=to, src="yahoo", period = "min", interval = 5)
getSymbols("AAPL",from=from, to=to, src="yahoo", period = "minw", interval = 5)
getSymbols("AAPL",from=from, to=to, src="yahoo", period = "wef", interval = 5)
getSymbols("AAPL",from=from, to=to, src="yahoo", period = 5, interval = "mins")
getSymbols("AAPL",from=from, to=to, src="yahoo", period = 5, interval = "min")
getSymbols("AAPL",from=from, to=to, src="yahoo", interval = "1m")
install.packages("devtools")
aapl <- Ticker$new('AAPL')
library(devtools)
library(devtools)
aapl <- Ticker$new('AAPL')
devtools::install_github("rsquaredacademy/yahoofinancer")
aapl <- Ticker$new('AAPL')
library(tidyverse)
library(dplyr)
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library("IRdisplay")
library(highcharter) #Interactive Plot
library(devtools)
library(yahoofinancer)
aapl <- Ticker$new('AAPL')
aapl$get_history(start = from, interval = '1m')
AAPL <- aapl$get_history(start = from, interval = '1m')
AAPL <- aapl$get_history(start = from, end = to, interval = '1m')
from <- "2023-05-23"
to <- "2023-05-26"
AAPL <- aapl$get_history(start = from, end = to, interval = '1m')
AAPL <- aapl$get_history(start = from, end = to, interval = '1d')
AAPL <- aapl$get_history(start = from, end = to, interval = '1m')
install.packages("FinancialInstrument")
install.packages("foreach")
install_github("braverock/blotter")
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/quantstrat")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("braverock/blotter")
install.packages(c("DT", "future.apply", "httpuv", "igraph", "knitr", "parallelly", "RcppArmadillo"))
install.packages("httpuv")
library(alphavantager)
detach("package:alphavantager", unload = TRUE)
install.packages("C:/Users/bravi/Downloads/blotter-master.zip", repos = NULL, type = "win.binary")
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github("braverock/blotter")
devtools::install_github("braverock/blotter", force = TRUE )
install.packages("xts")
devtools::install_github("braverock/blotter", force = TRUE )
library(devtools)
install_github("braverock/blotter")
library(devtools)
install_github("braverock/blotter")
library(devtools)
install_github("braverock/blotter")
install_github("braverock/blotter")
install.packages("xts")
install.packages("FinancialInstrument")
install.packages("PerformanceAnalytics")
library(devtools)
install_github("braverock/blotter")
install.packages("remotes")
library(remotes)
remotes::install_github("braverock/blotter")
library(remotes)
remotes::install_github("braverock/blotter")
install.packages("C:/Users/bravi/Downloads/blotter-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/bravi/Downloads/blotter-master.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/bravi/Downloads/blotter-master.zip", repos = NULL, type = "win.binary")
library(devtools)
install_local(path = "blotter-master.zip")
library(blotter-master)
library(blotter)
library(devtools)
install_local(path = "blotter-master.zip")
library(blotter-master)
library(blotter)
library(devtools)
install_local(path = "blotter-master.zip")
install.packages("C:/Users/bravi/projects/finance1r/blotter-master.zip", repos = NULL, type = "win.binary")
install.packages("Rtools")
install.packages("C:/Users/bravi/projects/finance1r/blotter-master.zip", repos = NULL, type = "win.binary")
install.packages("tidyr")
library(alphavantager)
detach("package:alphavantager", unload = TRUE)
library(anytime)
detach("package:anytime", unload = TRUE)
library(devtools)
library(devtools)
install_local(path = "blotter-master.zip")
library(blotter)
install_github("braverock/quanstrat")
require(devtools)
install_github("braverock/quanstrat")
devtools::install_github("braverock/quantstrat")
library(quantstrat)
library(blotter)
library(quantstrat)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
# ___Inputs___
from <- "2019-01-01"
to <- "2023-05-26"
symbols <- c("MSFT", "IBM")
getSymbols(symbols, from = from, to = to, adjust = TRUE)
View(MSFT)
View(IBM)
Sys.setenv(TZ="UTC") #setting up the timezone
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
View(MSFT)
View(IBM)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
#Initiate portfolio
initPortf(qs.strategy, "MSFT", initDate = initDate)
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
#___Packages___
library(devtools)
library(blotter)
library(quantstrat)
library(quantmod)
library(FinancialInstrument)
library(PerformanceAnalytics)
library(foreach)
library(tidyverse)
library(dplyr)
library(TTR)
library("IRdisplay")
library(highcharter) #Interactive Plot
library(devtools)
library(yahoofinancer)
# ___Inputs___
initDate <- "2019-01-02" #Date of initiation
from <- "2018-01-03"
to <- "2023-05-26"
initEq <- 1000 #Initial equity
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
)
initPortf(portfolio.st,
symbols=symbols,
initDate=initDate,
)
#Initiate portfolio
initPortf(portfolio.st, "MSFT", initDate=initDate)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
View(MSFT)
#Initiate portfolio
initPortf(name = portfolio.st, symbols = symbols, initDate=initDate)
#Initiate portfolio
initPortf(name = portfolio.st, symbols = "MSFT", initDate=initDate)
initPortf(name = portfolio.st, symbols = symbols, currency = "USD")
#Initiate portfolio
initPortf(name = portfolio.st, symbols = symbols)
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
#Initiate portfolio
initPortf("veamos", symbols = symbols)
#Initiate portfolio
initPortf("luxor", symbols = symbols)
currency("USD")
stock(symbols, currency="USD", multiplier=1)
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor
#Initiate portfolio
initPortf("p", symbols = "IBM", currency = "USD")
#Initiate portfolio
initPortf(strategy.st, symbols = "IBM", currency = "USD")
#Initiate portfolio
initPortf(strategy.st)
rm(list = ls(all.names = T))
.blotter <- new.env()
.strategy <- new.env()
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
rm(list = ls(all.names = T))
.blotter <- new.env()
.strategy <- new.env()
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
#___Packages___
library(devtools)
library(blotter)
library(quantstrat)
library(quantmod)
library(FinancialInstrument)
library(PerformanceAnalytics)
library(foreach)
library(tidyverse)
library(dplyr)
library(TTR)
library("IRdisplay")
library(highcharter) #Interactive Plot
library(devtools)
library(yahoofinancer)
rm(list = ls(all.names = T))
.blotter <- new.env()
.strategy <- new.env()
# ___Inputs___
initDate <- "2019-01-02" #Date of initiation
from <- "2018-01-03"
to <- "2023-05-26"
initEq <- 1000 #Initial equity
symbols <- c("MSFT", "IBM")
#set the currency and the stock we are interested
currency("USD")
stock(symbols, currency="USD", multiplier=1)
Sys.setenv(TZ="UTC") #setting up the timezone
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
#___Packages___
library(devtools)
library(blotter)
library(quantstrat)
library(quantmod)
library(FinancialInstrument)
library(PerformanceAnalytics)
library(foreach)
library(tidyverse)
library(dplyr)
library(TTR)
library("IRdisplay")
library(highcharter) #Interactive Plot
library(devtools)
library(yahoofinancer)
# ___Inputs___
initDate <- "2019-01-02" #Date of initiation
from <- "2018-01-03"
to <- "2023-05-26"
initEq <- 1000 #Initial equity
symbols <- c("MSFT", "IBM")
#set the currency and the stock we are interested
currency("USD")
stock(symbols, currency="USD", multiplier=1)
Sys.setenv(TZ="UTC") #setting up the timezone
#-------------Initiate portfolio and account-----------
strategy.st <- "luxor" #Name the strategy
account.st <- "luxor"
portfolio.st <- "luxor"
rm.strat("luxor")
#Initiate portfolio
initPortf(name=portfolio.st,
symbols=symbols,
initDate=initDate,
currency='USD')
#Initiate account
initAcct(name=account.st,
portfolios=portfolio.st,
initDate=initDate,
currency='USD',
initEq=initEq)
getSymbols(symbols, from = from, to = to, adjust = TRUE)
#Initiate account
initOrders(portfolio=portfolio.st,
symbols=symbols,
initDate=initDate)
#Store all the events in the strategy
strategy(strategy.st, store=TRUE)
args(SMA)
### indicators
add.indicator(strategy.st, name = "SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = nfast
),
label="nFast"
)
SMA()
args(RSI)
args(MACD)
args(SMA)
nfast <- 12
nslow <- 26
add.indicator(strategy.st, name = "SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = nfast
),
label="nFast"
)
add.indicator(strategy.st, name="SMA",
arguments = list(
x = quote(Cl(mktdata)[,1]),
n = nslow
),
label="nSlow"
)
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="gte"
),
label='long'
)
add.signal(strategy.st, name='sigCrossover',
arguments = list(
columns=c("nFast","nSlow"),
relationship="lt"
),
label='short'
)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
args(sigCrossover)
args(ruleSignal)
orderqty <- 100
### rules
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='short', sigval=TRUE,
orderside='long' ,
ordertype='market',
orderqty='all',
replace=TRUE
),
type='exit',
label='Exit2SHORT'
)
add.rule(strategy.st, name='ruleSignal',
arguments=list(sigcol='long' , sigval=TRUE,
orderside='long' ,
ordertype='market',
orderqty=orderqty,
replace=FALSE
),
type='enter',
label='EnterLONG'
)
out <- try(applyStrategy(strategy.st, portfolio.st))
applyStrategy(strategy.st, portfolio.st)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
for(symbol in symbols) {
chart.Posn(Portfolio=portfolio.st,
Symbol=symbol,
log=TRUE)
}
tstats <- tradeStats(portfolio.st)
(tstats) #transpose tstats
t(tstats) #transpose tstats
rets <- PortfReturns(Account = account.st)
rownames(rets) <- NULL
tab <- table.Arbitrary(rets,
metrics=c(
"Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
tab
# evaluate the performance to see how is the return of the trading strategy
rets <- PortfReturns(Account = account.st)
rownames(rets) <- NULL
tab <- table.Arbitrary(rets,
metrics=c(
"Return.cumulative",
"Return.annualized",
"SharpeRatio.annualized",
"CalmarRatio"),
metricsNames=c(
"Cumulative Return",
"Annualized Return",
"Annualized Sharpe Ratio",
"Calmar Ratio"))
tab
source("C:/Users/bravi/projects/finance1r/strategy_quantstrat.R", echo=TRUE)
charts.PerformanceSummary(rets, colorset = bluefocus)
View(IBM)
Cl(IBM)
quote(Cl(IBM))
quote(IBM)
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
