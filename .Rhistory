set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
confusionMatrix(loess_preds, test_set$close)$overall[["Accuracy"]]
loess_preds
confusionMatrix(loess_preds, test_set$close)$overall[["Accuracy"]]
set.seed(1)
train_loess <- train(close~volume,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
confusionMatrix(loess_preds, test_set$close)$overall[["Accuracy"]]
confusionMatrix(loess_preds, test_set$close)
table(loess_preds)
table(test_set$close)
confusionMatrix(table(loess_preds), table(test_set$close))$overall[["Accuracy"]]
levels(loess_preds)
confusionMatrix((loess_preds), (test_set$close))$overall[["Accuracy"]]
unname(loess_preds)
confusionMatrix(unname(loess_preds), (test_set$close))$overall[["Accuracy"]]
loess_preds <- unname(loess_preds)
loess_preds
class(loess_preds)
class(test_set$close)
confusionMatrix(c(loess_preds), c(test_set$close))$overall[["Accuracy"]]
confusionMatrix(factor(loess_preds), factor(test_set$close))$overall[["Accuracy"]]
loess_preds <- unname(loess_preds)
close <- test_set$close
confusionMatrix(factor(loess_preds), factor(close))$overall[["Accuracy"]]
confusionMatrix((loess_preds), (close))$overall[["Accuracy"]]
set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
close <- test_set$close
mean(loess_preds == close)
test_set['prediccion'] <- loess_preds
nrow(test_set)
test_set[1:3,n]
test_set[1:3,]
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
test_set <- df_price[nrow(df_price)-n+1:nrow(df_price),]
nrow(df_price)-n+1
n <- 10 # point to predict
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
test_set <- df_price[nrow(df_price)-n+1:nrow(df_price),]
train_set <- df_price[1:nrow(df_price)-n,]
1:nrow(df_price)-n
nrow(df_price)-n
train_set <- df_price[1:nrow(df_price)-n, ]
nrow(test_set)
set.seed(42)
level_low <- nrow(df_price)-n+1
nrow(df_price)
test_set <- df_price[level_low:nrow(df_price), ]
View(test_set)
set.seed(42)
level_test <- nrow(df_price)-n+1
test_set <- df_price[level_test:nrow(df_price), ]
level_train <- nrow(df_price)-n
train_set <- df_price[1:level_train, ]
nrow(train_set)
nrow(test_set)
# Loess model
set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
test_set['prediccion'] <- loess_preds
test_set['prediction'] <- loess_preds
train_set['prediction'] <- ''
df_price2 <- rbind(train_set, test_set)
n <- 10 # point to predict
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
level_test <- nrow(df_price)-n+1
test_set <- df_price[level_test:nrow(df_price), ]
level_train <- nrow(df_price)-n
train_set <- df_price[1:level_train, ]
nrow(train_set)
nrow(test_set)
# Loess model
set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
test_set['prediction'] <- loess_preds
train_set['prediction'] <- ''
df_price2 <- rbind(train_set, test_set)
View(df_price2)
library(tidyquant)
library(highcharter) #Interactive Plot
library(tidyverse)
library(caret)
library(readr)
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
level_test <- nrow(df_price)-n+1
test_set <- df_price[level_test:nrow(df_price), ]
level_train <- nrow(df_price)-n
train_set <- df_price[1:level_train, ]
nrow(train_set)
nrow(test_set)
# Loess model
set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
test_set['prediction'] <- loess_preds
train_set['prediction'] <- ''
df_price <- rbind(train_set, test_set)
df_price |> ggplot(aes(date, close)) +
geom_line(color = 'black') +
geom_line(aes(date, prediction), color = "red")
df_price |> ggplot(aes(date, close)) +
geom_line(color = 'black') +
geom_line(aes(date, prediction), color = "red",lty = 1)
df_price |> ggplot(aes(date, close)) +
geom_line(color = 'black')
df_price |> ggplot(aes(date, prediction)) +
geom_line(color = 'black')
sum(df_price$prediction)
class(df_price$prediction)
class(loess_preds)
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
level_test <- nrow(df_price)-n+1
library(tidyquant)
library(highcharter) #Interactive Plot
library(tidyverse)
library(caret)
library(readr)
# Inputs
from <- "2014-01-01"
to <- "2023-05-19"
n <- 10 # point to predict
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
level_test <- nrow(df_price)-n+1
test_set <- df_price[level_test:nrow(df_price), ]
level_train <- nrow(df_price)-n
train_set <- df_price[1:level_train, ]
nrow(train_set)
nrow(test_set)
# Loess model
set.seed(1)
train_loess <- train(close~date,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
test_set['prediction'] <- loess_preds
train_set['prediction'] <- 0
df_price <- rbind(train_set, test_set)
df_price |> ggplot(aes(date, prediction)) +
geom_line(color = 'black')
View(test_set)
View(train_set)
df_price[1:nrow(test_set), ]
df_price[1:nrow(test_set), ] |>
ggplot(aes(date, prediction)) +
geom_line(color = 'black')
test_set |>
ggplot(aes(date, prediction)) +
geom_line(color = 'black')
test_set |>
ggplot(aes(date, close)) +
geom_line(color = 'black')
test_set |>
ggplot(aes(date, close)) +
geom_point(color = 'black')
test_set |>
ggplot(aes(date, close)) +
geom_point(color = 'black') +
geom_point(aes(date, prediction), color="red")
test_set |>
ggplot(aes(date, prediction)) +
geom_point(color = 'black') +
geom_point(aes(date, close), color="red")
test_set$prediction[2]
test_set$prediction[2] - test_set$prediction[1]
test_set$prediction[10] - test_set$prediction[9]
library(tidyquant)
library(highcharter) #Interactive Plot
library(tidyverse)
library(caret)
library(readr)
df_price <- read_csv('data/bbri_jk.csv')
df_price <- df_price[,-1]
# Splitting the data
set.seed(42)
level_test <- nrow(df_price)-n+1
test_set <- df_price[level_test:nrow(df_price), ]
level_train <- nrow(df_price)-n
train_set <- df_price[1:level_train, ]
nrow(train_set)
nrow(test_set)
# Loess model
set.seed(1)
train_loess <- train(close~date+volume,
method = "gamLoess",
data = train_set)
loess_preds <- predict(train_loess, test_set)
loess_preds <- unname(loess_preds)
test_set['prediction'] <- loess_preds
train_set['prediction'] <- 0
df_price <- rbind(train_set, test_set)
test_set |>
ggplot(aes(date, prediction)) +
geom_point(color = 'black') +
geom_point(aes(date, close), color="red")
test_set$date[10]
x1 <- "2023-05-17"
predict(train_loess, x1)
library(tidyverse) # https://www.tidyverse.org/
library(dplyr) # or just dplyr
library(quantmod)
library(TTR)
library(PerformanceAnalytics)
library("IRdisplay")
# Inputs
from <- "2014-01-01"
to <- "2023-05-19"
getSymbols(c("AMZN","DAL"))
View(AMZN)
df2 <- df
# Returns from Open to Close, Hi to Close, or Close to Close
df2$OpCl <- OpCl(df2)
df <- AMZN
head(df)
df2 <- df
# Returns from Open to Close, Hi to Close, or Close to Close
df2$OpCl <- OpCl(df2)
df2$OpOp <- OpOp(df2)
df2$HiCl <- HiCl(df2)
df2$ClCl <- ClCl(df2)
View(df2)
getSymbols("AAPL",from=from,src="yahoo")
View(AAPL)
df2$pcntOpCl1 <- Delt(Op(df2),Cl(df2),k=1)
df2$pcntOpCl2 <- Delt(Op(df2),Cl(df2),k=2)
df2$pcntOpCl3 <- Delt(Op(df2),Cl(df2),k=3)
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
# Move up the OpCl by one period
df2$nextOpCl <- Next(OpCl(df2))
head(df2)
#the MACD and RSI functions in “TTR” to generate the technical indicators.
#The dataset “macd” has two columns: macd and its 9-period moving average called ‘signal’
macd <- MACD(df2$AMZN.Adjusted, nFast = 12, nSlow = 26, nSig = 9, maType = "SMA", percent = FALSE)
rsi <- RSI(df2$AMZN.Adjusted, n = 14, maType = "SMA")
tail(macd)
View(macd)
View(rsi)
View(macd)
options(repr.plot.width = 6, repr.plot.height = 3)
chartSeries(AMZN, subset = "2018::2018-06",
theme="white",
TA="addVo();addBBands();addCCI();
addTA(OpCl(AMZN),col='blue', type='h')  ")
options(repr.plot.width = 6, repr.plot.height = 3)
chartSeries(AMZN, subset = "2018::2018-06",
theme="black",
TA="addVo();addBBands();addCCI();
addTA(OpCl(AMZN),col='blue', type='h')  ")
# Strategy 1: if macd>signal, enter and stay in the market. If macd<signal, exit the market.
strategy1 <- ifelse ((macd$signal < macd$macd) , 1, 0)
strategy1[is.na(strategy1)] <-0
# Strategy 2: if overbought, enter and stay in the market.
strategy2 <- ifelse ((macd$signal < macd$macd) & (rsi$rsi > 70), 1, 0)
strategy2[is.na(strategy2)] <-0
# Strategy 3: if oversold, enter and stay in the market.
strategy3 <- ifelse ((macd$signal > macd$macd) & (rsi$rsi < 30), 1, 0)
strategy3[is.na(strategy3)] <-0
# Buy-and-hold: keep it all time. So "1", not "0"
bh_strategy <- rep(1,dim(macd)[1])
View(strategy1)
View(strategy3)
# Buy-and-hold strategy
BH_backtest <- function(df,from_date,to_date,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return',
'Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
buy_and_hold_performance <- BH_backtest(AMZN, from_date = '2007-01-01', to_date = '2015-12-31',"Buy & Hold Strategy")
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-01', to_date = '2015-12-31', strategy1,"Strategy1")
View(AMZN)
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-01', to_date = '2015-12-31', strategy1,"Strategy1")
source("C:/Users/bravi/projects/finance1r/strategy_ttr.R", echo=TRUE)
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
print('hola')
#trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
strategy1_performance
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
rtn.daily <- dailyReturn(df) # returns by day
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
strategy1_performance
View(rtn.daily)
rtn.daily <- dailyReturn(df) # returns by day
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
rtn.daily <- dailyReturn(df) # returns by day
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
strategy1_performance
rtn.daily <- dailyReturn(df) # returns by day
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy, na.pad = FALSE)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
# Strategy 1: if macd>signal, enter and stay in the market. If macd<signal, exit the market.
strategy1 <- ifelse ((macd$signal < macd$macd) , 1, 0)
strategy1[is.na(strategy1)] <-0
# Strategy 2: if overbought, enter and stay in the market.
strategy2 <- ifelse ((macd$signal < macd$macd) & (rsi$rsi > 70), 1, 0)
strategy2[is.na(strategy2)] <-0
# Strategy 3: if oversold, enter and stay in the market.
strategy3 <- ifelse ((macd$signal > macd$macd) & (rsi$rsi < 30), 1, 0)
strategy3[is.na(strategy3)] <-0
View(rtn.daily)
rtn.daily <- dailyReturn(df) # returns by day
# Put in a function
backtest <- function(df,from_date,to_date,strategy,strategy_name){
trade_return <- rtn.daily[index(rtn.daily)<=to_date & index(rtn.daily)>=from_date]*lag(strategy)
cumm_return <- Return.cumulative(trade_return)
annual_return <- Return.annualized(trade_return)
summary(as.ts(trade_return))
SharpeRatio <- SharpeRatio(as.ts(trade_return), Rf = 0, p = 0.95, FUN = "StdDev")
SharpeRatioAnnualized <- SharpeRatio.annualized(trade_return, Rf = 0)
out <- as.data.frame(c(cumm_return,annual_return,SharpeRatio,SharpeRatioAnnualized))
out <- round(out,2)
colnames(out) <- strategy_name
row.names(out) <- c('Cumulative Return','Annualized Return','Sharpe Ratio','Annualized Sharpe Ratio')
return( out )
}
# Strategy 1
strategy1_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy1,"Strategy1")
strategy1_performance
# Strategy 2
strategy2_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy2,"Strategy2")
strategy2_performance
# Strategy 3
strategy3_performance <- backtest(AMZN, from_date = '2007-01-03', to_date = '2015-12-31', strategy3,"Strategy3")
strategy3_performance
nrow(strategy1_performance)
nrow(strategy1)
nrow(df2)
options(repr.plot.width = 6, repr.plot.height = 3)
chartSeries(AMZN, subset = "2018::2018-06",
theme="white",
TA="addVo();addBBands();addCCI();
addTA(OpCl(AMZN),col='blue', type='h')  ")
library(highcharter) #Interactive Plot
library(highcharter) #Interactive Plot
#Interactive Plot
highchart(type="stock") %>%
hc_add_series(AMZN) %>%
hc_add_series(SMA(na.omit(Cl(AMZN)),n=12),name="SMA(12)") %>%
hc_add_series(SMA(na.omit(Cl(AMZN)),n=26),name="SMA(26)") %>%
hc_title(text="<b>BBRI Price Candle Stick Chart 2014-2023</b>")
#Interactive Plot
highchart(type="stock") %>%
hc_add_series(AMZN) %>%
hc_add_series(SMA((Cl(AMZN)),n=12),name="SMA(12)") %>%
hc_add_series(SMA((Cl(AMZN)),n=26),name="SMA(26)") %>%
hc_title(text="<b>BBRI Price Candle Stick Chart</b>")
#Interactive Plot
highchart(type="stock") %>%
hc_add_series(AMZN) %>%
hc_add_series(SMA((Cl(AMZN)),n=12),name="SMA(12)") %>%
hc_add_series(SMA((Cl(AMZN)),n=26),name="SMA(26)") %>%
hc_add_series(strategy1, name="Estrategia_1") %>%
hc_title(text="<b>BBRI Price Candle Stick Chart</b>")
